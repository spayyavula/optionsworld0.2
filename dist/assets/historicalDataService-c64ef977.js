import{_ as l}from"./index-c30e8189.js";const c=parseInt("30");class u{static async storeHistoricalData(o,r){try{const{supabase:a}=await l(()=>import("./supabase-1409f739.js"),["assets/supabase-1409f739.js","assets/index-c30e8189.js","assets/index-9c20db7e.css"]);if(!a){console.log("Supabase not configured, using local storage fallback"),this.storeInLocalStorage(`historical_${o}`,r);return}const s=r.map(e=>({ticker:o,date:e.date,open:e.open,high:e.high,low:e.low,close:e.close,volume:e.volume})),{error:i}=await a.from("historical_data").upsert(s,{onConflict:"ticker,date",ignoreDuplicates:!1});if(i){console.error("Error storing historical data:",i),this.storeInLocalStorage(`historical_${o}`,r);return}console.log(`Stored ${r.length} historical data points for ${o}`)}catch(a){console.error("Failed to store historical data:",a),this.storeInLocalStorage(`historical_${o}`,r)}}static async getHistoricalData(o,r=14){try{const{supabase:a}=await l(()=>import("./supabase-1409f739.js"),["assets/supabase-1409f739.js","assets/index-c30e8189.js","assets/index-9c20db7e.css"]);if(!a)return console.log("Supabase not configured, checking local storage"),this.getFromLocalStorage(`historical_${o}`)||[];const s=new Date;s.setDate(s.getDate()-r);const{data:i,error:e}=await a.from("historical_data").select("*").eq("ticker",o).gte("date",s.toISOString().split("T")[0]).order("date",{ascending:!0});return e?(console.error("Error fetching historical data:",e),this.getFromLocalStorage(`historical_${o}`)||[]):(i==null?void 0:i.map(t=>({date:t.date,open:t.open,high:t.high,low:t.low,close:t.close,volume:t.volume})))||[]}catch(a){return console.error("Failed to fetch historical data:",a),this.getFromLocalStorage(`historical_${o}`)||[]}}static async storeOptionsHistoricalData(o,r,a){try{const{supabase:s}=await l(()=>import("./supabase-1409f739.js"),["assets/supabase-1409f739.js","assets/index-c30e8189.js","assets/index-9c20db7e.css"]);if(!s){console.log("Supabase not configured, using local storage fallback"),this.storeInLocalStorage(`options_${o}`,a);return}const i=a.map(t=>({contract_ticker:o,underlying_ticker:r,date:t.date,bid:t.bid,ask:t.ask,last:t.last,volume:t.volume,open_interest:t.open_interest,implied_volatility:t.implied_volatility,delta:t.delta,gamma:t.gamma,theta:t.theta,vega:t.vega})),{error:e}=await s.from("options_historical_data").upsert(i,{onConflict:"contract_ticker,date",ignoreDuplicates:!1});if(e){console.error("Error storing options historical data:",e),this.storeInLocalStorage(`options_${o}`,a);return}console.log(`Stored ${a.length} options historical data points for ${o}`)}catch(s){console.error("Failed to store options historical data:",s),this.storeInLocalStorage(`options_${o}`,a)}}static async getOptionsHistoricalData(o,r=14){try{const{supabase:a}=await l(()=>import("./supabase-1409f739.js"),["assets/supabase-1409f739.js","assets/index-c30e8189.js","assets/index-9c20db7e.css"]);if(!a)return console.log("Supabase not configured, checking local storage"),this.getFromLocalStorage(`options_${o}`)||[];const s=new Date;s.setDate(s.getDate()-r);const{data:i,error:e}=await a.from("options_historical_data").select("*").eq("contract_ticker",o).gte("date",s.toISOString().split("T")[0]).order("date",{ascending:!0});return e?(console.error("Error fetching options historical data:",e),this.getFromLocalStorage(`options_${o}`)||[]):(i==null?void 0:i.map(t=>({date:t.date,bid:t.bid,ask:t.ask,last:t.last,volume:t.volume,open_interest:t.open_interest,implied_volatility:t.implied_volatility,delta:t.delta,gamma:t.gamma,theta:t.theta,vega:t.vega})))||[]}catch(a){return console.error("Failed to fetch options historical data:",a),this.getFromLocalStorage(`options_${o}`)||[]}}static async cleanupOldData(){try{const{supabase:o}=await l(()=>import("./supabase-1409f739.js"),["assets/supabase-1409f739.js","assets/index-c30e8189.js","assets/index-9c20db7e.css"]);if(!o){console.log("Supabase not configured, skipping cleanup");return}const r=new Date;r.setDate(r.getDate()-c);const{error:a}=await o.from("historical_data").delete().lt("date",r.toISOString().split("T")[0]);a&&console.error("Error cleaning up stock historical data:",a);const{error:s}=await o.from("options_historical_data").delete().lt("date",r.toISOString().split("T")[0]);s&&console.error("Error cleaning up options historical data:",s),console.log(`Cleaned up historical data older than ${c} days`)}catch(o){console.error("Failed to cleanup old data:",o)}}static async getStorageStats(){var o,r;try{const s=(await l(()=>import("./supabase-1409f739.js"),["assets/supabase-1409f739.js","assets/index-c30e8189.js","assets/index-9c20db7e.css"])).supabase;if(!s)return this.getLocalStorageStats();const{count:i}=await s.from("historical_data").select("*",{count:"exact",head:!0}),{count:e}=await s.from("options_historical_data").select("*",{count:"exact",head:!0}),{data:t}=await s.from("historical_data").select("date").order("date",{ascending:!0}).limit(1),{data:n}=await s.from("historical_data").select("date").order("date",{ascending:!1}).limit(1);return{stockDataPoints:i||0,optionsDataPoints:e||0,oldestDate:((o=t==null?void 0:t[0])==null?void 0:o.date)||null,newestDate:((r=n==null?void 0:n[0])==null?void 0:r.date)||null}}catch(a){return console.error("Failed to get storage stats:",a),this.getLocalStorageStats()}}static storeInLocalStorage(o,r){try{localStorage.setItem(o,JSON.stringify(r))}catch(a){console.error("Failed to store in local storage:",a)}}static getFromLocalStorage(o){try{const r=localStorage.getItem(o);return r?JSON.parse(r):null}catch(r){return console.error("Failed to get from local storage:",r),null}}static getLocalStorageStats(){let o=0,r=0,a=null,s=null;try{for(let i=0;i<localStorage.length;i++){const e=localStorage.key(i);if(e!=null&&e.startsWith("historical_")){const t=this.getFromLocalStorage(e);t&&Array.isArray(t)&&(o+=t.length)}else if(e!=null&&e.startsWith("options_")){const t=this.getFromLocalStorage(e);t&&Array.isArray(t)&&(r+=t.length)}}}catch(i){console.error("Failed to get local storage stats:",i)}return{stockDataPoints:o,optionsDataPoints:r,oldestDate:a,newestDate:s}}}export{u as HistoricalDataService};
